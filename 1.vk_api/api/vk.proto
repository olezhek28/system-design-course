syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/olezhek28/auth/pkg/note_v1;note_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "VK"
    version: "1.0.0"
    contact: {
      name: "Oleg Kozyrev"
      email: "okozyrev@ozon.ru"
    };
  };

  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

// Операции для работы с параметрами пользователей
service UserV1 {
  // Возвращает параметры пользователя по id
  rpc Get (GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/user/v1"
    };
  }
}

message GetRequest {
  // Идентификатор пользователя, параметры которого запрашиваем
  int64 user_id = 1;
}

message GetResponse {
  // Параметры пользователя
  User user = 1;
}

// Операции для работы с друзьями пользователей
service FriendV1 {
  // Добавляет пользователю нового друга по id
  rpc Add (AddRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/friend/v1"
      body: "*"
    };
  }

  // Удаляет друга у пользователя по id
  rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/friend/v1"
    };
  }

  // Возвращает список параметров друзей пользователя
  rpc GetList (GetListRequest) returns (GetListResponse) {
    option (google.api.http) = {
      get: "/friend/v1/list"
    };
  }
}

message User {
  // Идентификатор пользователя
  int64 id = 1;
  // Имя пользователя
  string name = 2;
  // Фамилия пользователя
  string surname = 3;
  // Ссылка на аватар пользователя
  string avatar_link = 4;
  // Электронная почта пользователя
  string email = 5;
  // Номер телефона пользователя
  string phone = 6;
  // О себе
  string about = 7;
}

message AddRequest {
  // Идентификатор пользователя, которому добавляем друга
  int64 user_id = 1;
  // Идентификатор пользователя, которого добавляем в друзья
  int64 friend_id = 2;
}

message DeleteRequest {
  // Идентификатор пользователя, у которого удаляем друга
  int64 user_id = 1;
  // Идентификатор пользователя, которого удаляем из друзей
  int64 friend_id = 2;
}

message GetListRequest {
  // Идентификатор пользователя, у которого запрашиваем список друзей
  int64 user_id = 1;
}

message GetListResponse {
  // Список друзей пользователя c их параметрами
  repeated User friends = 1;
}

// Операции для работы с публикациями
service PostV1 {
  // Создает новую публикацию на стене пользователя
  rpc Publish (PublishRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/post/v1"
      body: "*"
    };
  }

  // Загружает контент публикации
  rpc UploadContent (UploadContentRequest) returns (UploadContentResponse) {
    option (google.api.http) = {
      post: "/post/v1/upload-content"
      body: "*"
    };
  }
}

message PublishRequest {
  // Идентификатор пользователя, на стене которого создаем публикацию
  int64 user_id = 1;
  // Текст публикации
  string text = 2;
  // Ссылка на контент публикации (её может не быть)
  google.protobuf.StringValue content_link = 3;
}

message UploadContentRequest {
  // Идентификатор пользователя, на стене которого создаем публикацию
  int64 user_id = 1;
  // Контент публикации
  bytes content = 2;
}

message UploadContentResponse {
  // Ссылка на контент публикации
  string content_link = 1;
}

// Операции для работы с лентой публикаций
service FeedV1 {
  // Возвращает ленту публикаций пользователя по id
  rpc GetMyFeed (GetMyFeedRequest) returns (GetMyFeedResponse) {
    option (google.api.http) = {
      post: "/feed/v1/my"
      body: "*"
    };
  }

  // Возвращает ленту публикаций друзей пользователя по id
  rpc GetOtherFeed (GetOtherFeedRequest) returns (GetOtherFeedResponse) {
    option (google.api.http) = {
      post: "/feed/v1/other"
      body: "*"
    };
  }
}

message GetMyFeedRequest {
  // Идентификатор пользователя, ленту которого запрашиваем
  int64 user_id = 1;
  // Количество публикаций в ленте, которое необходимо вернуть
  int64 limit = 2;
  // Смещение от начала ленты
  int64 offset = 3;
}

message GetMyFeedResponse {
  // Список публикаций пользователя в ленте
  repeated Post posts = 1;
}

message GetOtherFeedRequest {
  // Идентификатор пользователя, для которого хотим вернуть список публикаций его друзей
  int64 user_id = 1;
  // Количество публикаций в ленте, которое необходимо вернуть
  int64 limit = 2;
  // Смещение от начала ленты
  int64 offset = 3;
}

message GetOtherFeedResponse {
  // Список публикаций друзей пользователя в ленте
  repeated Post posts = 1;
}

message Post {
  // Идентификатор публикации
  int64 id = 1;
  // Идентификатор пользователя, на стене которого создана публикация
  int64 user_id = 2;
  // Текст публикации
  string text = 3;
  // Ссылка на контент публикации (её может не быть)
  google.protobuf.StringValue content_link = 4;
  // Дата создания публикации
  google.protobuf.Timestamp created_at = 5;
}

// Операции для работы с диалогами
service DialogV1 {
  // Возвращает список диалогов пользователя
  rpc GetDialogList (GetDialogListRequest) returns (GetDialogListResponse) {
    option (google.api.http) = {
      get: "/dialog/v1/dialog-list"
    };
  }

  // Возвращает сообщения в диалоге пользователя с другим пользователем
  rpc GetMessage (GetMessageRequest) returns (GetMessageResponse) {
    option (google.api.http) = {
      get: "/dialog/v1/message-list"
    };
  }
}

message GetDialogListRequest {
  // Идентификатор пользователя, для которого запрашиваем список диалогов
  int64 user_id = 1;
  // Количество диалогов, которое необходимо вернуть
  int64 limit = 2;
  // Смещение от начала списка диалогов
  int64 offset = 3;
}

message GetDialogListResponse {
  // Список диалогов пользователя
  repeated Dialog dialogs = 1;
}

message Dialog {
  // Идентификатор диалога
  int64 id = 1;
  // Идентификатор пользователя, который начал диалог
  int64 user_id = 2;
  // Идентификатор пользователя, с которым ведется диалог
  int64 friend_id = 3;
  // Дата и время последнего сообщения в диалоге
  google.protobuf.Timestamp last_message_timestamp = 4;
}

message GetMessageRequest {
  // Идентификатор пользователя, для которого запрашиваем список сообщений
  int64 user_id = 1;
  // Идентификатор диалога, сообщения которого запрашиваем
  int64 dialog_id = 2;
  // Количество сообщений, которое необходимо вернуть
  int64 limit = 3;
  // Смещение от начала списка сообщений
  int64 offset = 4;
}

message GetMessageResponse {
  // Список сообщений в диалоге
  repeated Message messages = 1;
}

message Message {
  // Идентификатор сообщения
  int64 id = 1;
  // Идентификатор диалога, в котором находится сообщение
  int64 dialog_id = 2;
  // Идентификатор пользователя, который отправил сообщение
  int64 user_id = 3;
  // Текст сообщения
  string text = 4;
  // Ссылка на контент сообщения (её может не быть)
  google.protobuf.StringValue content_link = 5;
  // Дата отправки сообщения
  google.protobuf.Timestamp created_at = 6;
}

// Операции для обмена сообщениями
service MailV1 {
  // Отправляет сообщение от одного пользователя другому
  rpc Send (SendRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/mail/v1/send"
    };
  }
}

message SendRequest {
  // Идентификатор пользователя, который отправляет сообщение
  int64 user_id = 1;
  // Идентификатор пользователя, которому отправляется сообщение
  int64 friend_id = 2;
  // Текст сообщения
  string text = 3;
  // Ссылка на контент сообщения (её может не быть)
  google.protobuf.StringValue content_link = 4;
}
